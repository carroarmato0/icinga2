/******************************************************************************
 * Icinga 2                                                                   *
 * Copyright (C) 2012-2014 Icinga Development Team (http://www.icinga.org)    *
 *                                                                            *
 * This program is free software; you can redistribute it and/or              *
 * modify it under the terms of the GNU General Public License                *
 * as published by the Free Software Foundation; either version 2             *
 * of the License, or (at your option) any later version.                     *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with this program; if not, write to the Free Software Foundation     *
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.             *
 ******************************************************************************/

%type IcingaApplication {
}

%type IcingaStatusWriter {
        %attribute %string "status_path",
        %attribute %number "update_interval"
}

%type Checkable {
	%attribute %string "display_name",

	%require "check_command",
	%attribute %name(CheckCommand) "check_command",
	%attribute %number "max_check_attempts",
	%attribute %name(TimePeriod) "check_period",
	%attribute %number "check_interval",
	%attribute %number "retry_interval",

	%attribute %number "enable_notifications",
	%attribute %number "enable_active_checks",
	%attribute %number "enable_passive_checks",
	%attribute %number "enable_event_handler",

	%attribute %name(EventCommand) "event_command",

	%attribute %number "enable_flapping",
	%attribute %number "flapping_threshold",

	%attribute %number "enable_perfdata",

	%attribute %number "volatile",

	%attribute %array "authorities" {
		%attribute %name(Endpoint) "*"
	},
}

%type Host %inherits Checkable {
	%attribute %string "display_name",
	%attribute %array "groups" {
		%attribute %name(HostGroup) "*"
	},
}

%type HostGroup {
	%attribute %string "display_name"
}

%type Service %inherits Checkable {
	%require "host_name",
	%attribute %name(Host) "host_name",

	%attribute %string "name",

	%attribute %array "groups" {
		%attribute %name(ServiceGroup) "*"
	},
}

%type ServiceGroup {
	%attribute %string "display_name"
}

%type Notification {
	%require "host_name",
	%attribute %name(Host) "host_name",
	%attribute %string "service_name",

	%attribute %array "users" {
		%attribute %name(User) "*"
	},
	%attribute %array "user_groups" {
		%attribute %name(UserGroup) "*"
	},

	%attribute %dictionary "times" {
		%attribute %number "begin",
		%attribute %number "end",
	},

	%require "notification_command",
	%attribute %name(NotificationCommand) "notification_command",

	%attribute %number "notification_interval",
	%attribute %name(TimePeriod) "notification_period",

	%attribute %array "types" {
		%attribute %string "*"
	},
	%attribute %array "states" {
		%attribute %string "*"
	},

	%attribute %array "authorities" {
		%attribute %name(Endpoint) "*"
	},
}

%type User {
	%attribute %string "display_name",

	%attribute %array "groups" {
		%attribute %name(UserGroup) "*"
	},

	%attribute %number "enable_notifications",
	%attribute %name(TimePeriod) "notification_period",

	%attribute %array "notification_types" {
		%attribute %string "*"
	},
	%attribute %array "notification_states" {
		%attribute %string "*"
	},
}

%type UserGroup {
	%attribute %string "display_name"
}

%type TimePeriod {
	%attribute %string "display_name",

	%require "methods",
	%attribute %dictionary "methods" {
		%require "update",
		%attribute %string "update"
	},

/*  %if (methods.update == "LegacyTimePeriod") { */
//	%require "ranges",
	%attribute %dictionary "ranges" {
		%attribute %string "*"
	}
/*    } */
}

%type Command {
    %require "methods",
    %attribute %dictionary "methods" {
	%require "execute",
	%attribute %string "execute"
    },

/*  %if (methods.execute == "PluginNotification" || methods.execute == "PluginCheck" || methods.execute == "PluginEvent") { */
//	%require "command",
	%attribute %string "command",
	%attribute %array "command" {
		%attribute %string "*"
	},
	%attribute %dictionary "env" {
		%attribute %string "*"
	},
	%attribute %array "escape_macros" {
		%attribute %string "*"
	},
	%attribute %number "timeout"
/*    } */
}

%type CheckCommand %inherits Command {

}

%type NotificationCommand %inherits Command {

}

%type EventCommand %inherits Command {

}

%type Domain {
	%attribute %dictionary "acl" {
		%attribute %number "*"
	}
}

%type ScheduledDowntime {
	%require "host_name",
	%attribute %name(Host) "host_name",
	%attribute %string "service_name",

	%require "author",
	%attribute %string "author",

	%require "comment",
	%attribute %string "comment",

	%attribute %number "duration",
	%attribute %number "fixed",

	%require "ranges",
	%attribute %dictionary "ranges" {
		%attribute %string "*"
	},
}

%type Dependency {
	%require "parent_host_name",
	%attribute %name(Host) "parent_host_name",
	%attribute %string "parent_service_name",

	%require "child_host_name",
	%attribute %name(Host) "child_host_name",
	%attribute %string "child_service_name",

	%attribute %name(TimePeriod) "period",

	%attribute %number "state_filter",
	%attribute %number "disable_checks",
	%attribute %number "disable_notifications"
}
